/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.java1projekt;

import hr.java1projekt.dal.Repository;
import hr.java1projekt.dal.RepositoryFactory;
import hr.java1projekt.model.Film;
import hr.java1projekt.model.Glumac;
import hr.java1projekt.model.GlumacTransferable;
import hr.java1projekt.model.Redatelj;
import hr.java1projekt.model.RedateljTransferable;
import hr.java1projekt.model.Zanr;
import hr.java1projekt.model.ZanrTransferable;
import hr.java1projekt.parsers.rss.FilmTableModel;
import hr.java1projekt.utils.FileUtils;
import hr.java1projekt.utils.IconUtils;
import hr.java1projekt.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Franjo
 */
public class PrikazFilmovaPanel extends javax.swing.JPanel {

    private Repository repository;

    private Film film;
    private Glumac glumac;
    private Zanr zanr;
    private Redatelj redatelj;

    private FilmTableModel filmTableModel;

    private Film odabraniFilm;

    private static final Random RANDOM = new Random();
    private static final String DIR = "src\\hr\\java1projekt\\assets\\plakati";

    private final List<Glumac> noviGlumci = new ArrayList<>();
    private final List<Redatelj> noviRedatelji = new ArrayList<>();
    private final List<Zanr> noviZanrovi = new ArrayList<>();

    private final Set<Glumac> glumci = new TreeSet<>();
    private final Set<Redatelj> redatelji = new TreeSet<>();
    private final Set<Zanr> zanrovi = new TreeSet<>();

    private final DefaultListModel<Glumac> sviGlumciModel = new DefaultListModel<>();
    private final DefaultListModel<Glumac> glumacFilmModel = new DefaultListModel<>();

    private final DefaultListModel<Redatelj> sviRedateljiModel = new DefaultListModel<>();
    private final DefaultListModel<Redatelj> redateljFilmModel = new DefaultListModel<>();

    private final DefaultListModel<Zanr> sviZanroviModel = new DefaultListModel<>();
    private final DefaultListModel<Zanr> zanrFilmModel = new DefaultListModel<>();

    /**
     * Creates new form PrikazFilmovaPanel
     */
    public PrikazFilmovaPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbPlakat = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfNaslov = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfOriginalniNaziv = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfPocetak = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        spTrajanje = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsGlumci = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsRedatelj = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsOstaliRedatelji = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsOstaliGlumci = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsZanr = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsOstaliZanrovi = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfPlakat = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnOdaberi = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnAzuriraj = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblFilmovi = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        tfOpis = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setMaximumSize(new java.awt.Dimension(1130, 1130));
        setPreferredSize(new java.awt.Dimension(1130, 717));

        lbPlakat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/java1projekt/assets/menu/prazno.jpg"))); // NOI18N

        jLabel2.setText("Naslov");

        jLabel3.setText("Opis");

        jLabel4.setText("Originalni naziv");

        jLabel5.setText("Pocetak");

        jLabel6.setText("Trajanje");

        jLabel7.setText("Glumci");

        jScrollPane1.setViewportView(lsGlumci);

        jLabel8.setText("Svi glumci");

        jScrollPane2.setViewportView(lsRedatelj);

        jScrollPane3.setViewportView(lsOstaliRedatelji);

        jScrollPane4.setViewportView(lsOstaliGlumci);

        jScrollPane5.setViewportView(lsZanr);

        jScrollPane6.setViewportView(lsOstaliZanrovi);

        jLabel9.setText("Redatelj");

        jLabel10.setText("Svi redatelji");

        jLabel11.setText("Žanr");

        jLabel12.setText("Svi žanrovi");

        jLabel13.setText("Plakat");

        btnOdaberi.setText("Odaberi");
        btnOdaberi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdaberiActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("ODABIR FILMA");

        btnDodaj.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDodaj.setText("DODAJ");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnObrisi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnObrisi.setText("OBRIŠI");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnAzuriraj.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAzuriraj.setText("AŽURIRAJ");
        btnAzuriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAzurirajActionPerformed(evt);
            }
        });

        tblFilmovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IDFilm", "Naziv", "Opis", "OriginalniNaziv", "Link", "PlakatPutanja", "Pocetak", "Trajanje", "PublishedDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblFilmovi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFilmoviMouseClicked(evt);
            }
        });
        tblFilmovi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblFilmoviKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tblFilmovi);
        if (tblFilmovi.getColumnModel().getColumnCount() > 0) {
            tblFilmovi.getColumnModel().getColumn(0).setMinWidth(40);
            tblFilmovi.getColumnModel().getColumn(0).setMaxWidth(40);
            tblFilmovi.getColumnModel().getColumn(7).setMinWidth(40);
            tblFilmovi.getColumnModel().getColumn(7).setMaxWidth(40);
        }

        tfOpis.setColumns(20);
        tfOpis.setLineWrap(true);
        tfOpis.setRows(5);
        jScrollPane12.setViewportView(tfOpis);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/java1projekt/assets/menu/clapperboard.png"))); // NOI18N

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/java1projekt/assets/menu/popcorn.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(108, 108, 108))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(118, 118, 118)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(23, 23, 23)
                                .addComponent(tfNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfPocetak, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel11)
                                .addGap(114, 114, 114)
                                .addComponent(jLabel12)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(tfPlakat, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(btnAzuriraj, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(380, 380, 380))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfOriginalniNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(spTrajanje, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(175, 175, 175))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addGap(290, 290, 290)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(btnOdaberi, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(lbPlakat, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(81, 81, 81))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfOriginalniNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lbPlakat, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPlakat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spTrajanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addComponent(btnOdaberi, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(tfPocetak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAzuriraj, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblFilmoviMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilmoviMouseClicked
        showFilm();
        try {
            loadGlumciModel();
            loadGlumciFilmModel();

            loadRedateljiModel();
            loadRedateljiFilmModel();

            loadZanroviModel();
            loadZanroviFilmModel();
        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_tblFilmoviMouseClicked

    private void tblFilmoviKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblFilmoviKeyReleased
        showFilm();
        try {
            loadGlumciModel();
            loadGlumciFilmModel();

            loadRedateljiModel();
            loadRedateljiFilmModel();

            loadZanroviModel();
            loadZanroviFilmModel();
        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_tblFilmoviKeyReleased

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed

        try {
            String localPlakatPutanja = uploadPlakata();
            Film film = new Film(
                    tfNaslov.getText().trim(),
                    tfOpis.getText().trim(),
                    tfOriginalniNaziv.getText().trim(),
                    odabraniFilm.getLink(),
                    localPlakatPutanja,
                    tfOriginalniNaziv.getText().trim(),
                    (int) spTrajanje.getValue(),
                    odabraniFilm.getPublishedDate()
            );
            repository.createFilm(film);
            MessageUtils.showInformationMessage("Obavijest", "Film dodan!");
            filmTableModel.setFilmovi(repository.selectFilmovi());
            isprazniFormu();

        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Greska kod dodavanja!");
        }    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnAzurirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAzurirajActionPerformed
        if (odabraniFilm == null) {
            MessageUtils.showInformationMessage("Greska", "Odaberite film za brisanje");
            return;
        }
        try {
            if (odabraniFilm.getPlakatPutanja() == null || !tfPlakat.getText().trim().equals(odabraniFilm.getPlakatPutanja())) {
                Files.deleteIfExists(Paths.get(odabraniFilm.getPlakatPutanja()));
                String localPicturePath = uploadPlakata();
                odabraniFilm.setPlakatPutanja(localPicturePath);
            }

            odabraniFilm.setNaziv(tfNaslov.getText().trim());
            odabraniFilm.setOriginalniNaziv(tfOriginalniNaziv.getText().trim());
            odabraniFilm.setOpis(tfOpis.getText().trim());
            odabraniFilm.setPocetak(tfPocetak.getText().trim());
            odabraniFilm.setTrajanje((int) spTrajanje.getValue());

            if (noviGlumci.isEmpty()) {
                odabraniFilm.setGlumci(new ArrayList<>());
            } else {
                odabraniFilm.setGlumci(noviGlumci);
            }

            if (noviRedatelji.isEmpty()) {
                odabraniFilm.setRedatelji(new ArrayList<>());
            } else {
                odabraniFilm.setRedatelji(noviRedatelji);
            }

            if (noviZanrovi.isEmpty()) {
                odabraniFilm.setZanrovi(new ArrayList<>());
            } else {
                odabraniFilm.setZanrovi(noviZanrovi);
            }

            repository.updateFilm(odabraniFilm);

            MessageUtils.showInformationMessage("Obavijest", "Film ažuriran!");
            filmTableModel.setFilmovi(repository.selectFilmovi());
            isprazniFormu();

        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Greska kod updatea!");
        }


    }//GEN-LAST:event_btnAzurirajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        if (odabraniFilm == null) {
            MessageUtils.showInformationMessage("Greska", "Odaberite film za brisanje");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Obavijest",
                "Stvarno želite obrisati film?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(odabraniFilm.getPlakatPutanja()));
                repository.deleteFilm(odabraniFilm.getiDFilm());

                MessageUtils.showInformationMessage("Obavijest", "Film je obrisan!");
                filmTableModel.setFilmovi(repository.selectFilmovi());
                isprazniFormu();

            } catch (IOException ex) {

            } catch (Exception ex) {
                Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Greska", "Greska!");
            }
    }//GEN-LAST:event_btnObrisiActionPerformed
    }
    private void btnOdaberiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdaberiActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg");
        if (file == null) {
            return;
        }
        tfPlakat.setText(file.getAbsolutePath());
        setPlakat(lbPlakat, file);

        try {
            String localPlakatPutanja = uploadPlakata();
            Film film = new Film(
                    tfNaslov.getText().trim(),
                    tfOpis.getText().trim(),
                    tfOriginalniNaziv.getText().trim(),
                    odabraniFilm.getLink(),
                    localPlakatPutanja,
                    tfOriginalniNaziv.getText().trim(),
                    (int) spTrajanje.getValue(),
                    odabraniFilm.getPublishedDate()
            );

            MessageUtils.showInformationMessage("Obavijest", "Plakat dodan!");
            filmTableModel.setFilmovi(repository.selectFilmovi());
            isprazniFormu();
        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greška", "Greška!");
        }    }//GEN-LAST:event_btnOdaberiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAzuriraj;
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnOdaberi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lbPlakat;
    private javax.swing.JList<Glumac> lsGlumci;
    private javax.swing.JList<Glumac> lsOstaliGlumci;
    private javax.swing.JList<Redatelj> lsOstaliRedatelji;
    private javax.swing.JList<Zanr> lsOstaliZanrovi;
    private javax.swing.JList<Redatelj> lsRedatelj;
    private javax.swing.JList<Zanr> lsZanr;
    private javax.swing.JSpinner spTrajanje;
    private javax.swing.JTable tblFilmovi;
    private javax.swing.JTextField tfNaslov;
    private javax.swing.JTextArea tfOpis;
    private javax.swing.JTextField tfOriginalniNaziv;
    private javax.swing.JTextField tfPlakat;
    private javax.swing.JTextField tfPocetak;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initTblFilmovi();
            dragNDrop();

        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Greska", "Greska kod inicijalizacije!");
            System.exit(1);
        }
    }

    private void initTblFilmovi() throws Exception {
        tblFilmovi.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblFilmovi.setAutoCreateRowSorter(true);
        filmTableModel = new FilmTableModel(repository.selectFilmovi());
        tblFilmovi.setModel(filmTableModel);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void popuniDetalje(Film selectedFilm) {
        glumci.clear();
        redatelji.clear();
        zanrovi.clear();

        if (selectedFilm.getPlakatPutanja() != null && Files.exists(Paths.get(selectedFilm.getPlakatPutanja()))) {
            tfPlakat.setText(selectedFilm.getPlakatPutanja());
            setPlakat(lbPlakat, new File(selectedFilm.getPlakatPutanja()));
        } else {
            tfPlakat.setText("");
        }

        tfNaslov.setText(selectedFilm.getNaziv());
        tfOriginalniNaziv.setText(selectedFilm.getOriginalniNaziv());
        tfOpis.setText(selectedFilm.getOpis());
        tfPocetak.setText(selectedFilm.getPocetak());
        spTrajanje.setValue(selectedFilm.getTrajanje());
        selectedFilm.getGlumci().forEach(action -> glumci.add(action));
        selectedFilm.getRedatelji().forEach(action -> redatelji.add(action));
        selectedFilm.getZanrovi().forEach(action -> zanrovi.add(action));
    }

    private void showFilm() {
        isprazniFormu();
        int selectedRow = tblFilmovi.getSelectedRow();
        int rowIndex = tblFilmovi.convertRowIndexToModel(selectedRow);
        int selectedFilmID = (int) filmTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Film> optFilm = repository.selectFilm(selectedFilmID);
            if (optFilm.isPresent()) {
                odabraniFilm = optFilm.get();
                popuniDetalje(odabraniFilm);

            }
        } catch (Exception ex) {
            Logger.getLogger(PrikazFilmovaPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Pogreška", "Nema ničega!");
        }
    }

    private void loadGlumciModel() throws Exception {
        sviGlumciModel.clear();
        repository.selectGlumci().forEach(action -> sviGlumciModel.addElement(action));
        lsOstaliGlumci.setModel(sviGlumciModel);
    }

    private void loadGlumciFilmModel() {
        glumacFilmModel.clear();
        glumci.forEach(action -> glumacFilmModel.addElement(action));
        lsGlumci.setModel(glumacFilmModel);
    }

    private void loadRedateljiModel() throws Exception {
        sviRedateljiModel.clear();
        repository.selectRedatelji().forEach(action -> sviRedateljiModel.addElement(action));
        lsOstaliRedatelji.setModel(sviRedateljiModel);
    }

    private void loadRedateljiFilmModel() {
        redateljFilmModel.clear();
        redatelji.forEach(action -> redateljFilmModel.addElement(action));
        lsRedatelj.setModel(redateljFilmModel);
    }

    private void loadZanroviModel() throws Exception {
        sviZanroviModel.clear();
        repository.selectZanrovi().forEach(action -> sviZanroviModel.addElement(action));
        lsOstaliZanrovi.setModel(sviZanroviModel);
    }

    private void loadZanroviFilmModel() {
        zanrFilmModel.clear();
        zanrovi.forEach(action -> zanrFilmModel.addElement(action));
        lsZanr.setModel(zanrFilmModel);
    }

    private void isprazniFormu() {

        odabraniFilm = null;
    }

    private void setPlakat(JLabel lbPlakat, File file) {
        try {
            lbPlakat.setIcon(IconUtils.createIcon(file.getAbsolutePath(), lbPlakat.getWidth(), lbPlakat.getHeight()));

        } catch (IOException ex) {
            Logger.getLogger(PrikazFilmovaPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Pogreška", "Nema ikone!");
        }
    }

    private void dragNDrop() {
        lsOstaliGlumci.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsOstaliGlumci.setDragEnabled(true);
        lsOstaliGlumci.setTransferHandler(new ExportTransferGlumac());

        lsOstaliRedatelji.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsOstaliRedatelji.setDragEnabled(true);
        lsOstaliRedatelji.setTransferHandler(new ExportTransferRedatelj());

        lsOstaliZanrovi.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsOstaliZanrovi.setDragEnabled(true);
        lsOstaliZanrovi.setTransferHandler(new ExportTransferZanr());

        lsGlumci.setDropMode(DropMode.ON);
        lsGlumci.setTransferHandler(new ImportTransferGlumac());

        lsRedatelj.setDropMode(DropMode.ON);
        lsRedatelj.setTransferHandler(new ImportTransferRedatelj());

        lsZanr.setDropMode(DropMode.ON);
        lsZanr.setTransferHandler(new ImportTransferZanr());
    }

    private String uploadPlakata() throws IOException {
        String plakatPath = tfPlakat.getText().trim();
        String ext = plakatPath.substring(plakatPath.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(plakatPath, localPicturePath);
        return localPicturePath;

    }

    private class ExportTransferZanr extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ZanrTransferable(lsOstaliZanrovi.getSelectedValue());
        }
    }

    private class ImportTransferZanr extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ZanrTransferable.ZANR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Zanr add = (Zanr) transferable.getTransferData(ZanrTransferable.ZANR_FLAVOR);
                if (zanrovi.add(add)) {
                    noviZanrovi.add(add);
                    loadZanroviFilmModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ExportTransferGlumac extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GlumacTransferable(lsOstaliGlumci.getSelectedValue());
        }
    }

    private class ExportTransferRedatelj extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new RedateljTransferable(lsOstaliRedatelji.getSelectedValue());
        }
    }

    private class ImportTransferGlumac extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GlumacTransferable.GLUMAC_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Glumac glumac = (Glumac) transferable.getTransferData(GlumacTransferable.GLUMAC_FLAVOR);

                if (glumci.add(glumac)) {
                    noviGlumci.add(glumac);
                    loadGlumciFilmModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ImportTransferRedatelj extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(RedateljTransferable.REDATELJ_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Redatelj redatelj = (Redatelj) transferable.getTransferData(RedateljTransferable.REDATELJ_FLAVOR);

                if (redatelji.add(redatelj)) {
                    noviRedatelji.add(redatelj);
                    loadRedateljiFilmModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PrikazFilmovaPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

}
